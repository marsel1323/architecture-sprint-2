name: sharding-repl-cache
services:
  pymongo_api:
    container_name: pymongo_api
    platform: linux/amd64
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"

  configSrv:
    image: mongo:4.4
    platform: linux/amd64
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - config-data:/data/db
    command: mongod --configsvr --replSet config-server --bind_ip_all --port 27017
    healthcheck:
      test: [ "CMD", "mongo", "--port", "27017", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongos_router:
    image: mongo:4.4
    platform: linux/amd64
    container_name: mongos_router
    restart: always
    depends_on:
      - configSrv
      - shard1-primary
      - shard2-primary
    ports:
      - "27018:27018"
    command: >
      sh -c "
      sleep 10 &&
      until mongo --host configSrv --port 27017 --eval 'db.adminCommand(\"ping\")'; do
        echo 'Waiting for configSrv to be ready...';
        sleep 5;
      done &&
      mongos --configdb config-server/configSrv:27017 --bind_ip_all --port 27018
      "
    healthcheck:
      test: [ "CMD", "mongo", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-primary:
    image: mongo:4.4
    platform: linux/amd64
    container_name: shard1-primary
    restart: always
    ports:
      - "27019:27019"
    volumes:
      - shard1-primary-data:/data/db
    command: mongod --shardsvr --replSet shard1 --bind_ip_all --port 27019
    healthcheck:
      test: [ "CMD", "mongo", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-secondary1:
    image: mongo:4.4
    platform: linux/amd64
    container_name: shard1-secondary1
    restart: always
    ports:
      - "27020:27020"
    volumes:
      - shard1-secondary1-data:/data/db
    command: mongod --shardsvr --replSet shard1 --bind_ip_all --port 27020
    healthcheck:
      test: [ "CMD", "mongo", "--port", "27020", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-secondary2:
    image: mongo:4.4
    platform: linux/amd64
    container_name: shard1-secondary2
    restart: always
    ports:
      - "27021:27021"
    volumes:
      - shard1-secondary2-data:/data/db
    command: mongod --shardsvr --replSet shard1 --bind_ip_all --port 27021
    healthcheck:
      test: [ "CMD", "mongo", "--port", "27021", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-primary:
    image: mongo:4.4
    platform: linux/amd64
    container_name: shard2-primary
    restart: always
    ports:
      - "27022:27022"
    volumes:
      - shard2-primary-data:/data/db
    command: mongod --shardsvr --replSet shard2 --bind_ip_all --port 27022
    healthcheck:
      test: [ "CMD", "mongo", "--port", "27022", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-secondary1:
    image: mongo:4.4
    platform: linux/amd64
    container_name: shard2-secondary1
    restart: always
    ports:
      - "27023:27023"
    volumes:
      - shard2-secondary1-data:/data/db
    command: mongod --shardsvr --replSet shard2 --bind_ip_all --port 27023
    healthcheck:
      test: [ "CMD", "mongo", "--port", "27023", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-secondary2:
    image: mongo:4.4
    platform: linux/amd64
    container_name: shard2-secondary2
    restart: always
    ports:
      - "27024:27024"
    volumes:
      - shard2-secondary2-data:/data/db
    command: mongod --shardsvr --replSet shard2 --bind_ip_all --port 27024
    healthcheck:
      test: [ "CMD", "mongo", "--port", "27024", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

volumes:
  config-data:
  shard1-primary-data:
  shard1-secondary1-data:
  shard1-secondary2-data:
  shard2-primary-data:
  shard2-secondary1-data:
  shard2-secondary2-data:
  redis_data:
